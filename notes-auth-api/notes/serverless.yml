service: notes-api
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: ap-northeast-2

functions:
  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool
      COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebclient

  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    # DynamoDB 하드코딩 하지 않고 Arn 논리적 주소 참조
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn
    events:
      # API 게이트웨이 생성 및 메소드 path 지정
      - http:
          method: post
          path: notes
          # 디폴트로 Lambda Authorizer는 토큰모드
          authorizer: authorizer

  updateNote:
    handler: handler.updateNote
    environment:
      # Ref를 사용하면 notesTable의 TableName을 가져올 수 있다.
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer
  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer

  getAllNotes:
    handler: handler.getAllNotes
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: get
          path: notes
          # authorizer: authorizer
          # Api gateWay에서 직접 권한 부여자 생성하여 cognito userPool 토큰 기반의 인증을 쉽게 만들 수 있다. 이떄 yaml에 생성할 권한부여자 명과, arn(적용할 cogintio Arn)을 기입해야 한다.
          # authorizer:
          #   name: userpool_authorizer
          #   arn: ${ssm:/notes/dev/userPoolId}
          authorizer:
            name: userpool_authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt cognitoUserPool.Arn

# 특정 함수에 권한을 적용
plugins:
  - serverless-iam-roles-per-function

# DynamoDB 생성
resources:
  Resources: ${file(resources.yml)}
